type DataResponse = {	id: string;	[key: string]: unknown;};type ErrorResponse = {	message: string;	[key: string]: unknown;};type MethodResponse<D, E> = {	data?: D | null | undefined;	error?: E | null | undefined;};type CreateResponse = MethodResponse<DataResponse, ErrorResponse>;type SendOptions = {	[key: string]: unknown;};abstract class SendProvider<User, Opts extends SendOptions = SendOptions> {	protected client: unknown;	constructor(protected opts: Opts) {}	public abstract send(user: User, totp: string | number): Promise<CreateResponse>;}export { SendProvider };export type { SendOptions };